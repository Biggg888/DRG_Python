from drg_group.wuhan_2022.Base import message,intersect,SS_VALID
from drg_group.wuhan_2022.ADRG import QB1,QC1,QD1,QJ1,QR1,QS1,QS2,QS3,QS4,QT1

def group(record):
  mdc_zd=["D56.300","D69.400x002","D59.300x001","A18.211","D68.101","D61.001","D69.000x008","I74.800x010","D61.907","D73.803","D84.100x005","I77.008","D68.301","D69.301","D58.200x002","D64.001","D80.001","D69.400x006","D47.700x010","D46.203","D57.204","D69.003","D51.200","D72.801","D64.000","R59.012","D46.600","D59.800","D64.901","D61.202","D80.601","I89.800x011","D64.900x006","D50.100","D59.201","D73.502","D53.901","D69.500x003","D53.802","D69.900","D80.102","D59.401","D61.000x006","D67.x00x003","D18.100x019","Q27.807","D48.906+D63.0*","D69.000","L04.902","D56.900","D69.302","D57.202","D68.200x006","D69.100x004","D76.304","D58.002","D58.101","D55.100x001","D58.100x002","D75.105","D68.100x001","D55.202","E85.400x004","D66.x02","D69.000x010","D56.101","L04.301","L04.201","L04.901","D68.902","R59.003","D68.200x007","D75.800","D64.800x002","D82.800","D18.107","D64.803","D68.200x001","D81.601","L04.900x002","D83.800","D59.902","A18.207","D76.100x005","D83.100","S36.011","D59.200","D58.205","D72.101","D55.203","D56.100","L04.200","I89.010","D75.806","D68.400x002","D75.100","D55.000","D61.802","D58.901","D51.101","D59.104","D64.904","D69.000x007","D59.600x004","R23.301","D55.900","D57.302","D58.001","I88.108","D68.602","D61.904","D61.900","D73.100","D58.202","D55.200","D53.100","D56.800","D69.200","L04.900x007","D56.301","D82.200","C79.800x829","D69.502","D56.100x003","D82.900","D69.200x007","D53.001","L04.300","D73.802","D76.101","D47.700x009","D68.400","D61.007","A18.200x006","D51.302+G32.0*","D68.200x005","D71.x00x004","D59.900","D65.x00x003","D69.802","D73.800x010","D72.900","I74.800x012","D58.204","D76.102","I88.800x001","D51.300","D59.000","T86.000x003","E32.100","D55.204","D71.x00x003","D36.000","D82.100","D59.602","D75.000","D52.800","D68.402","D89.100x006","D61.002","D68.300","I88.900x006","D68.605","D76.100x003","D69.801","D53.804","D61.201","I88.100","D72.001","D50.801","D68.201","D75.111","E83.101","D69.400x003","D56.400","D81.900x001","D18.000x044","D73.000","D80.700","D51.200x001","D56.102","D57.800","D46.201x001","D81.802","D81.000x002","D57.001","D68.202","D15.000","D46.100","R59.004","D71.x00","D50.901","R76.801","D89.100x005","D68.600x003","D73.002","D55.201","D80.100","D69.002","I74.800x004","L03.901","D69.405","I72.812","D46.500","D52.900x001","D64.902","R59.100","D59.901","D73.300","D68.603","D68.401","D89.301","D68.001","D68.203","S36.000","D69.004","D82.301","T86.000","D89.800x003","D68.903","D50.102","D64.900x007","D73.901","D89.300","D59.402","D51.000","D53.000","E32.001","D61.905","D70.x00x001","D72.104","D71.x01","D81.600","D84.800x001","E32.000","E32.800x001","D18.100x023","D59.103","D76.302","D72.102","D65.x04","D13.901","D75.104","S36.000x031","D72.800","D75.109","D84.800","R59.000x012","D55.800","D80.100x003","D72.808","D80.300","D82.300x002","D69.000x011","R23.300","D61.005","D69.008","D66.x03+M36.2*","Q85.907","C26.100","D68.206","A18.208","S36.001","R59.002","D69.102","D69.006","D69.100x003","D65.x03","D69.005+N08.2*","D80.900","D59.500x001","D53.801","D61.101","D61.900x001","A18.210","D51.001","D65.x01","D69.400","D68.901","D69.501","I88.900x003","D59.604","E80.200x007","D61.006","D68.208","D53.002","D68.601","D75.902","D57.100x003","D82.400","I88.901","D76.300","D72.000","D69.504","D59.400x001","D50.800x001","D69.009","D72.800x003","E32.800x005","D81.901","D58.100","R59.013","D18.103","D75.807","E32.800x004","L04.100","D67.x01","D69.403","D74.800x003","D75.901","I74.805","D61.000","D74.000x002","D81.200","D68.207","D81.900","D89.000x003","C37.x00","D70.x05","D64.900","D73.804","D61.908","D58.000","D76.100x004","D80.800x001","D69.200x005","D52.001","D47.700x008","D56.000","D72.803","D66.x01","D69.600","D72.809","D55.001","I89.802","D71.x00x005","D69.503","D69.500","D52.100","D59.100x002","D53.900","D58.203","D75.102","D75.803","L04.202","D86.101","D59.601","D72.807","D59.404","D69.203","I88.900x005","D73.800x011","D37.704","D18.104","D73.800x007","D46.000x003","D64.802","D64.903","D68.500","D73.400","D84.900x002","D57.301","I89.806","D73.900","D73.807","D81.100","D60.100x001","D84.000","R59.010","D59.400x002","D86.100","D75.110","D69.400x001","D89.000x004","D60.800","D58.800x001","L04.002","D58.206","D50.000","D83.200","R59.000x013","D71.x00x002","D56.200","D74.900","R72.x00x002","D68.604","D75.101","S36.000x021","D68.300x003","D53.803","D89.100","T86.001","D80.002","D46.000x002","R93.300x002","D84.900","D69.407","D68.400x003","I72.811","R71.x00","D57.100","D80.400","D80.200x001","D81.700","D68.801","D81.400","D50.101","D46.001","D68.205","R59.005","D61.003","D75.804","L04.900x005","R59.000x010","D51.900","D68.900x005","D59.100x005","D74.800x001","D58.801","D61.004","D61.200x002","D84.100x002","D84.900x003","D68.502","D58.900","D52.000x003","D76.303","R59.011","D51.800","D89.100x001","D80.800","D72.802","D74.000","D70.x07","D37.703","D74.000x003","D64.801","D46.400","D51.002","I82.800x002","D59.102","D66.x00x001","E32.002","D59.403","D69.201","D64.401","D73.504","L03.102","D89.100x003","D64.300","R16.100x001","D55.100x003","D57.200x001","D46.200","T86.000x004","D50.900","D59.105","L04.900","D70.x00x003","D58.200x006","D64.300x002","D73.808","D75.809","A18.212","D75.805","D55.101","D55.300","D59.501","R59.100x002","D68.000","D73.805","D70.x00x005","R59.007","D70.x00x004","D70.x00x008","D21.900x015","D46.000","E32.900","D76.301","D61.801","D59.301","D70.x02","D89.100x007","R23.300x003","N18.900x012+D63.8*","D17.700x031","D58.800","D69.101","D69.000x013","D73.500","D61.102","D38.400x001","D89.200","D80.900x002","D53.200","D68.200x010","D70.x00x010","D18.100x017","D89.001","D68.505","D68.200x008","D70.x06","D60.000x001","B55.200x001","D18.100x024","D57.203","D89.100x002","R59.000x009","D69.800","D56.901","D75.103","E32.000x003","D82.800x001","D70.x00x011","D37.700x005","D69.100x001","D60.900x001","D68.504","D73.800x002","D68.200x009","D81.800","D57.200","A18.206","D58.100x004","D68.300x001","D72.804","D84.103","M32.111+D77*","D80.500","D58.003","D72.105","D47.700x011","E32.802","D59.903","D81.801","Q89.004","D57.000x001","D80.101","D69.007","D70.x03","D61.909","D57.300","D51.301","A18.200x010","D68.000x002","D69.202","D69.401","E80.200x008","D52.000x001","D69.300","E32.801","D51.102","D75.107","D75.000x002","R59.006","D75.108","D59.603","D58.200x004","D68.302","D84.101","D73.801","D64.100","D65.x00x005","D61.901","D61.800x002","D73.200","D82.300","D69.200x003","D68.900x006","D61.300","D64.400x001","D73.503","D89.100x004","D59.500","C78.805","D18.100x003","D68.000x001","D89.900","D46.100x012","D69.406","D75.801","D68.204","D62.x00","S36.000x081","D73.505","D69.800x002","D64.200","D89.800","R59.008","D84.102","D18.100x002","D69.001","D68.300x004","D89.000","D76.200","D74.801","S36.002","D74.000x004","I86.810","D50.001","D75.106","D51.100","D72.806","D81.803","R71.x00x005","D73.001","D58.000x003","A51.400x010","D82.000","D58.000x001","D59.101","R59.014","D65.x02","D83.900","D57.201","D69.103","D70.x01","D72.100","D69.100x002","D61.903","D89.002","D80.901","D81.000","D80.000","D56.100x001","D68.900x003","D75.800x003","D58.201","A18.813+D77*","D46.100x002","D65.x00x001","D75.802","D59.600","D73.501","D69.200x006","D69.010","D61.906","D69.200x008","D70.x04","D18.100x018","D89.801","D72.805","D68.501","D61.902","D38.401","D84.100","D68.303","D70.x00","D89.800x002","A18.209","D18.100x006","D68.503","R71.x00x004","D83.000","R94.800x001","D51.003+G32.0*"]
  dept_list=[]
  if not (True and record.zdList[0] in mdc_zd):
    return ''
  
  message('符合MDCQ入组条件，匹配规则：主诊断匹配')

  result=QB1.group(record)
  if result:
    return result
  result=QC1.group(record)
  if result:
    return result
  result=QD1.group(record)
  if result:
    return result
  result=QJ1.group(record)
  if result:
    return result

  if False and record.ssList and intersect(SS_VALID,record.ssList):
    message('符合QQY入组条件，存在有效手术操作：'+','.join(set(record.ssList).intersection(SS_VALID)))
    return 'QQY'

  result=QR1.group(record)
  if result:
    return result

  result=QS1.group(record)
  if result:
    return result

  result=QS2.group(record)
  if result:
    return result

  result=QS3.group(record)
  if result:
    return result

  result=QS4.group(record)
  if result:
    return result

  result=QT1.group(record)
  if result:
    return result

  message('不符合MDCQ的ADRG入组条件')

