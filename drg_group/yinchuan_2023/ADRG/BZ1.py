from drg_group.yinchuan_2023.Base import message,intersect,SS_VALID
from drg_group.yinchuan_2023.DRG import MDCB_DRG

def group(record):
  adrg_zd=["D18.000x024","D18.000x025","D18.000x026","D18.000x028","D18.002","E03.902+G73.5*","E05.904+G73.5*","E16.108+G94.8*","E51.200+G32.8*","E85.400x012","E85.414+I68.0*","G09.x00x001","G09.x01","G24.300","G31.902","G45.002","G45.004","G45.300","G45.901","G91.000","G91.100","G91.200","G91.300","G91.800x006","G91.802","G91.900","G92.x00","G92.x01","G92.x02","G93.000x002","G93.000x006","G93.000x015","G93.001","G93.100","G93.101","G93.102","G93.200","G93.201","G93.400","G93.400x004","G93.400x006","G93.400x007","G93.400x008","G93.401","G93.402","G93.403","G93.600","G93.800x010","G93.801","G93.802","G93.806","G93.807","G93.808","G93.809","G93.812","G93.814","G93.900x001","G93.902","G93.903","G96.000","G96.000x006","G96.001","G96.003","G96.100x010","G96.900","G97.800x001","G97.800x003","G97.800x006","G97.800x009","G98.x00x001","G98.x00x002","I64.x01","I65.000x005","I65.800x001","I65.800x002","I66.901","I67.200","I67.201","I67.202","I67.400x001","I67.700x001","I67.800x003","I67.800x004","I67.803","I67.805","I67.900","I69.000x002","I69.100x001","I69.100x002","I69.100x003","I69.200x001","I69.300","I69.300x002","I69.300x003","I69.800x003","M05.301+G63.6*","M32.107+G99.2*","M32.114+G94.8*","N18.503+G63.8*","R20.202","R20.803","R25.100","R25.100x002","R25.800x001","R26.200x001","R26.800x001","R26.802","R27.800x001","R27.800x002","R29.300","R40.200x005","R42.x00x001","R42.x00x002","R42.x00x004","R56.000","R90.000x003","R90.803","R90.804","R93.000x002","R94.000","T85.002","T90.500","Z42.000x011","Z42.001"]
  adrg_zd1=[]
  adrg_ss=[]
  adrg_ss1=[]
  adrg_ss2=[]
  dept_list=[]
  if True and record.zdList[0] in adrg_zd:
    message('符合BZ1入组条件，匹配规则：主诊断匹配')
    
    if MDCB_DRG.BZ11_group(record):
      return 'BZ11'

    if MDCB_DRG.BZ13_group(record):
      return 'BZ13'

    if MDCB_DRG.BZ15_group(record):
      return 'BZ15'

    return 'BZ1'
  else:
    return ''

